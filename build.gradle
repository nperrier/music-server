// extra plugin dependencies
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "com.h2database:h2:1.3.176"
		classpath "com.googlecode.flyway:flyway-gradle-plugin:2.2.+"
	}
}

apply plugin: 'flyway'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'application'

defaultTasks 'build'

task wrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}

repositories {
	mavenCentral()
}

dependencies {
	compile(
			[group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.+'],

			[group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.1.+'],

			// logback
			[group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.+'],
			[group: 'ch.qos.logback', name: 'logback-core', version: '1.0.+'],
			[group: 'ch.qos.logback', name: 'logback-access', version: '1.0.+'],

			// slf4j
			[group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'],
			[group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.+'],
			[group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.+'],

			// flyway
			[group: 'org.flywaydb', name: 'flyway-core', version: '3.1+'],

			// h2
			[group: 'com.h2database', name: 'h2', version: '1.3.176'],

			// hibernate
			[group: 'org.hibernate', name: 'hibernate-core', version: '4.2.15.Final'],

			// hibernate c3p0 connection pool
			[group: 'org.hibernate', name: 'hibernate-c3p0', version: '4.2.15.Final'],
			// hibernate second-level cache
			// [group: 'org.hibernate', name: 'hibernate-ehcache', version: '4.2.15.Final'],
			// [group: 'net.sf.ehcache', name: 'ehcache-core', version: '2.6.+'],

			// just needed for DDL generation
			[group: 'org.hibernate', name: 'hibernate-tools', version: '4.0.0-CR1'],
			// optional dependency needed for Hibernate
			[group: 'javassist', name: 'javassist', version: '3.12.1.GA'],
			// needed for joda Datetime
			// [group: 'org.jadira.usertype',	name: 'usertype.spi', version: '3.1.0.CR10'],

			// jetty
			[group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '8+'],
			[group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '8+'],
			[group: 'org.eclipse.jetty', name: 'jetty-annotations', version: '8+'],

			// jersey
			[group: 'com.sun.jersey', name: 'jersey-core', version: '1.17.+'],
			[group: 'com.sun.jersey', name: 'jersey-server', version: '1.17.+'],
			[group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.17.+'],
			[group: 'com.sun.jersey', name: 'jersey-bundle', version: '1.17.+'],
			[group: 'com.sun.jersey.contribs', name: 'jersey-guice', version: '1.17.+'],

			// jackson
			[group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.2.+'],
			[group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.2.+'],
			[group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.2.+'],
			[group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.2.+'],

			// google libs
			[group: 'com.google.inject', name: 'guice', version: '3.0'],
			[group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '3.0'],
			[group: 'com.google.inject.extensions', name: 'guice-servlet', version: '3.0'],
			[group: 'com.google.guava', name: 'guava', version: '15.0'],

			[group: 'org', name: 'jaudiotagger', version: '2.0.+'],

			[group: 'joda-time', name: 'joda-time', version: '2.3'],

			[group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'],
			[group: 'org.apache.commons', name: 'commons-io', version: '1.3.+'],
			[group: 'commons-codec', name: 'commons-codec', version: '1.9'],

			// properties lib
			// [group: 'org.aeonbits.owner', name: 'owner', version: '1.0.5'],

			// command line parser
			[group: 'com.beust', name: 'jcommander', version: '1.+']
	)
	testCompile(
			[group: 'junit', name: 'junit', version: '4.+'],
			[group: 'org.mockito', name: 'mockito-all', version: '1.9.+']
	)
}

// println "projectDir: $projectDir"
description = 'A personal music server'
version = '0.3'
sourceCompatibility = 1.8
//targetCompatability = 1.8
mainClassName = 'com.perrier.music.Core'

setEnvironment()
loadConfig()

def setEnvironment() {
	if (!hasProperty('env')) {
		ext.env = 'dev'
	}

	println "Environment is set to $env"
}

def loadConfig() {
	def configFile = file("conf/$env/config.groovy")
	def config = new ConfigSlurper().parse(configFile.toURI().toURL())
	ext.config = config
}

flyway {
	driver = config.h2.driver
	url = config.h2.url
	user = config.h2.username
	password = config.h2.password
}

jar {
	manifest {
		attributes(
				'Implementation-Title': 'Music Server',
				'Implementation-Version': version,
				'Main-Class': mainClassName
		)
	}
}

test { // test framework package
	exclude 'com/perrier/music/test/**'
}

run {
	debug = config.debug ?: false
}

task devClean(type: Delete) << {
	description 'Deletes the dev directory used for testing the server'

	ant.delete(includeEmptyDirs: 'true') {
		fileset(dir: file('dev'), includes: '**/*')
	}
}

task distWeb(type: Exec) {
	workingDir 'web'
	commandLine 'grunt', 'build'
}

distWeb.onlyIf { !project.hasProperty('distWeb.skip') }

//distZip {
//	into('/web') {
//		from ''
//		include '*'
//	}
//}

distZip.dependsOn distWeb
distTar.dependsOn distWeb

// Need this for mac so that java app doesn't show up in foreground
applicationDefaultJvmArgs = ['-Dapple.awt.UIElement=true']

tasks.startScripts {
	doLast {
		// Add redirection for stderr to log files in startup script:
		def scriptShellFile = file "${outputDir}/${applicationName}"
		scriptShellFile.text = scriptShellFile.text.replace("${mainClassName} \"\$@\"", "${mainClassName} \"\$@\" 2> \$APP_HOME/log/error.log")

		// TODO: windows script
		// def scriptBatchFile = file "${outputDir}/${applicationName}.bat"
		//scriptBatchFile.text = scriptBatchFile.text.replace('CLASSPATH=%APP_HOME%\\lib', 'CLASSPATH=%APP_HOME%\\config\\;%APP_HOME%\\lib')
	}
}

applicationDistribution.into('') {
	//create an empty 'logs' directory in distribution root
	def logDirBase = new File('/tmp/app-dummy-dir')
	logDirBase.mkdirs()
	def logDir = new File(logDirBase.absolutePath + '/log')
	logDir.mkdirs()

	from { logDirBase }
}

applicationDistribution.from("web/dist/") {
	into "web"
}

applicationDistribution.from("conf/prod") {
	into "conf"
	include("config.groovy", "logback.groovy")
}

applicationDistribution.from("src/main/resources/images/no-cover.svg") {
	into "resources/images"
}
