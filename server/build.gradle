// extra plugin dependencies
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.postgresql:postgresql:9.4.1211"
		classpath "com.googlecode.flyway:flyway-gradle-plugin:2.2.+"
	}
}


apply plugin: 'flyway'
apply plugin: 'java'
apply plugin: 'application'

defaultTasks 'build'

task wrapper(type: Wrapper) {
	gradleVersion = '2.2.1'
}

repositories {
	mavenCentral()
}

// add integration tests source dir
//sourceSets {
//	'integration-test' {
//		java {
//			compileClasspath += main.output + test.output
//			runtimeClasspath += main.output + test.output
//			srcDir file('src/integration-test/java')
//		}
//		resources.srcDir file('src/integration-test/resources')
//	}
//}

//configurations {
//	integrationTestCompile.extendsFrom testCompile
//	integrationTestRuntime.extendsFrom testRuntime
//}

dependencies {
	compile(
			project(':api'),

			[group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.+'],

			[group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.1.+'],

			// logback
			[group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.+'],
			[group: 'ch.qos.logback', name: 'logback-core', version: '1.0.+'],
			[group: 'ch.qos.logback', name: 'logback-access', version: '1.0.+'],

			// slf4j
			[group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'],
			[group: 'org.slf4j', name: 'jul-to-slf4j', version: '1.7.+'],
			[group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.+'],

			// flyway
			[group: 'org.flywaydb', name: 'flyway-core', version: '3.2+'],

			// postgresql 
			// NOTE: Matches currently supported Heroku Postgresql version
			[group: 'org.postgresql', name: 'postgresql', version: '9.4.1211'],

			// hibernate
			[group: 'org.hibernate', name: 'hibernate-core', version: '5.2.3.Final'],

			// hibernate connection pool
			[group: 'org.hibernate', name: 'hibernate-c3p0', version: '5.2.3.Final'],
			// hibernate second-level cache
			// [group: 'org.hibernate', name: 'hibernate-ehcache', version: '5.2.3.Final'],
			// [group: 'net.sf.ehcache', name: 'ehcache-core', version: '2.6.+'],

			// just needed for DDL generation
			//[group: 'org.hibernate', name: 'hibernate-tools', version: '4.0.0-CR1'],
			// optional dependency needed for Hibernate
			[group: 'javassist', name: 'javassist', version: '3.12.1.GA'],

			// hibernate validator
			[group: 'org.hibernate', name: 'hibernate-validator', version: '5.2.4.Final'],
			// hibernate validator depends on these libs
			[group: 'javax.el', name: 'javax.el-api', version: '2.2.4'],
			[group: 'org.glassfish.web', name: 'javax.el', version: '2.2.4'],

			// jetty
			[group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '8+'],
			[group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '8+'],
			[group: 'org.eclipse.jetty', name: 'jetty-annotations', version: '8+'],

			// jersey
			[group: 'com.sun.jersey', name: 'jersey-core', version: '1.19.+'],
			[group: 'com.sun.jersey', name: 'jersey-server', version: '1.19.+'],
			[group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.19.+'],
			[group: 'com.sun.jersey', name: 'jersey-bundle', version: '1.19.+'],
			[group: 'com.sun.jersey.contribs', name: 'jersey-guice', version: '1.19.+'],

			// jackson
			[group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.2.+'],
			[group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.2.+'],
			[group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.2.+'],
			[group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.2.+'],

			// google libs
			[group: 'com.google.inject', name: 'guice', version: '3.0'],
			[group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '3.0'],
			[group: 'com.google.inject.extensions', name: 'guice-servlet', version: '3.0'],
			[group: 'com.google.guava', name: 'guava', version: '15.0'],

			[group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'],
			[group: 'org.apache.commons', name: 'commons-io', version: '1.3.+'],
			[group: 'commons-codec', name: 'commons-codec', version: '1.9'],

			// command line parser
			[group: 'com.beust', name: 'jcommander', version: '1.+'],

			// JSON Web Token
			[group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '2.10.+'],

			// Amazon S3 storage
			[group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.+']
	)
	testCompile(
			[group: 'junit', name: 'junit', version: '4.+'],
			[group: 'org.mockito', name: 'mockito-all', version: '1.9.+']
	)
}

applicationName = 'music-server'
description = 'A personal music server'
sourceCompatibility = 1.8
//targetCompatability = 1.8
mainClassName = 'com.perrier.music.Core'

printInfo()
setEnvironment()
loadConfig()

def printInfo() {
	println "version: $version"
	println "projectDir: $projectDir"
}

def setEnvironment() {
	if (!hasProperty('env')) {
		ext.env = 'dev'
	} else {
		ext.env = property('env')
	}

	println "Environment: $env"
}

def loadConfig() {
	def configFile = file("conf/$env/config.groovy")
	def config = new ConfigSlurper().parse(configFile.toURI().toURL())
	ext.config = config
}

flyway {
	driver = config.db.driver
	url = config.db.url
	user = config.db.username
	password = config.db.password
	schemas = config.db.schemas
}

jar {
	manifest {
		attributes(
				'Implementation-Title': 'Music Server',
				'Implementation-Version': version,
				'Main-Class': mainClassName
		)
	}
}

test { // test framework package
	exclude 'com/perrier/music/test/**'
}

//task integrationTest(type: Test) {
//	testClassesDir = sourceSets['integration-test'].output.classesDir
//	classpath = sourceSets['integration-test'].runtimeClasspath
//	outputs.upToDateWhen { false } // this forces task to always run tests
//}

// run integ tests as part of build
//check.dependsOn integrationTest
// ensure unit tests run before integ tests
//integrationTest.mustRunAfter test
//integrationTest.onlyIf { !project.hasProperty('integrationTest.skip') }

// ensure integ test reports go to separate dir from unit test reports
tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
//	testResultsDir = file("${buildDir}/${testResultsDirName}/${name}")
//	reports.junitXml.destination = file("${testResultsDir}/${name}")
}

run {
	debug = config.debug ?: false

	// pass in '-Prun.args='-config conf/dev/config.properties'
	if (project.hasProperty('run.args')) {
		args project['run.args'].split().toList()
	}
}

task devClean(type: Delete) << {
	description 'Deletes the dev directory used for testing the server'

	ant.delete(includeEmptyDirs: 'true') {
		fileset(dir: file('dev'), includes: '**/*')
	}
}

task buildWeb(type: Exec) {
	workingDir '../web'
	commandLine 'node_modules/.bin/grunt', 'build'
}

buildWeb.onlyIf { !project.hasProperty('buildWeb.skip') }

distZip.dependsOn buildWeb
distTar.dependsOn buildWeb
//installApp.dependsOn buildWeb
installApp.from("../web/dist/") {
	into "web"
}

// Need this for mac so that java app doesn't show up in foreground
applicationDefaultJvmArgs = ['-Dapple.awt.UIElement=true']

tasks.startScripts {
	doLast {
		// Add redirection for stderr to log files in startup script:
		def scriptShellFile = file("${outputDir}/${applicationName}")
		scriptShellFile.text = scriptShellFile.text.replace("${mainClassName} \"\$@\"", "${mainClassName} \"\$@\" 2> \$APP_HOME/log/error.log")

		// TODO: windows script
		// def scriptBatchFile = file("${outputDir}/${applicationName}.bat")
		//scriptBatchFile.text = scriptBatchFile.text.replace('CLASSPATH=%APP_HOME%\\lib', 'CLASSPATH=%APP_HOME%\\config\\;%APP_HOME%\\lib')
	}
}

// Heroku entry task
task stage(dependsOn: ['clean', 'installApp'])

applicationDistribution.into('') {
	//create an empty 'logs' directory in distribution root
	def logDirBase = file('/tmp/app-dummy-dir')
	logDirBase.mkdirs()
	def logDir = file(logDirBase.absolutePath + '/log')
	logDir.mkdirs()

	from { logDirBase }
}

applicationDistribution.from("../web/dist/") {
	into "web"
}

applicationDistribution.from("conf/prod") {
	into "conf"
	include("config.groovy", "logback.groovy")
}

applicationDistribution.from("src/main/resources/images/no-cover.svg") {
	into "resources/images"
}
